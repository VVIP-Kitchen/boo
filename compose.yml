services:
  postgres:
    image: postgres:13.16-alpine3.20
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "127.0.0.1:6379:6379"
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  manager:
    depends_on:
      postgres:
        condition: service_healthy
    build: ./manager
    container_name: manager
    restart: always
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}

  discord-bot:
    depends_on:
      - manager
      - redis
    build: .
    container_name: boo
    command: uv run src/main.py
    restart: always
    networks:
      - default
      - internal_net
    environment:
      - ADMIN_LIST=${ADMIN_LIST}
      - CONTEXT_LIMIT=${CONTEXT_LIMIT}
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - TENOR_API_KEY=${TENOR_API_KEY}
      - DB_SERVICE_BASE_URL=manager:8080
      - TOMORROW_IO_API_KEY=${TOMORROW_IO_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
  
  sandbox:
    build: ./sandbox
    container_name: sandbox
    read_only: true
    mem_limit: 512m
    cpus: 1.0
    pids_limit: 64
    ulimits:
      nproc: 64           # further enforce process cap
      nofile: 128         # max open files
    restart: always
    networks:
      - internal_net
    security_opt:
      - "no-new-privileges:true"    # prevents privilege escalation
    cap_drop:             # drop ALL Linux capabilities
      - ALL
    tmpfs:                # only writable dir
      - /tmp:rw,noexec,nosuid,size=64m

volumes:
  postgres_data:
  redis_data:

networks:
  default: {}
  internal_net:
    internal: true
